#!/usr/bin/env python

import numpy as np
import h5py
from sys import argv
from scipy.interpolate import interp1d
from matplotlib import pyplot as plt
from scipy.signal import tukey

#Compares the PKP precursor envelope of stacked synths and data h5 envelopes
#Data should have a sampling rate of 50 samp/sec
#Synths should be from -35 sec to +10 seconds after
#Synths range from 130 to 140


def main(**kwargs):
    save = kwargs.get('save',False)
    data = argv[1]
    synth1 = argv[2]
    synth2 = argv[3]
    #synth3 = argv[4]
    fig, ax = plt.subplots(1,2,figsize=(25,15))
    compare_synth_data(data,synth1,ax[0],title='EED_000')
    compare_synth_data(data,synth2,ax[1],title='EED_007')
    #compare_synth_data(data,synth3,ax[2],title='EED_009')
    if save:
        plt.savefig('/home/samhaug/Desktop/'+synth+'.pdf')
    else:
        plt.show()

def compare_synth_data(data,synth,ax,**kwargs):
    '''
    Compare synth and data. plot it on ax
    '''
    title = kwargs.get('title',None)
    label = kwargs.get('label',None)

    # Read h5py files
    f_data = h5py.File(data,'r')
    f_synth = h5py.File(synth,'r')

    env_data = f_data['env']
    std_data = f_data['std']

    env_synth = f_synth['env'][...]
    t_synth = np.linspace(0,10,num=env_synth.shape[1])
    f_synth = interp1d(t_synth,env_synth,axis=1)
    t_new = np.linspace(0,10,num=env_data.shape[1])
    env_synth = f_synth(t_new)

    # Roll the array to align the maxima
    for idx, ii in enumerate(env_synth):
        roll_synth = np.argmax(env_data[idx,:])-np.argmax(env_synth[idx,:])
        env_synth[idx] = np.roll(env_synth[idx],roll_synth)

    int_data = env_data[:,2000:8000]
    std_data = std_data[:,2000:8000]/2.5
    int_synth = env_synth[:,2000:8000]

    # Normalize each envelope on each column
    int_data = int_data/int_data.max(axis=1)[:,None]
    # set up interpolation
    int_t = np.linspace(-14,10,num=int_data.shape[1])

    # Multiply the precursor window to make it visible
    int_synth[:,0:3500] *= 8
    int_data[:,0:3500] *= 8
    std_data[:,0:3500] *= 8

    # Add the pre noise level to all envelopes
    for idx,ii in enumerate(int_data):
        int_data[idx] += -1*np.mean(int_data[idx][0:300])

    for idx, ii in enumerate(int_data):
        if idx%2 != 0:
            continue
        ax.axhline(idx,color='k',alpha=0.2)
        y = [0,5,10,15,20]
        y_label = [130,132.5,135,137.5,140]
        ax.set_ylim((0,25))
        ax.set_yticklabels(y_label)
        ax.plot(int_t,int_data[idx]+idx,color='k')
        ax.plot(int_t,int_synth[idx]+idx,color='r')
        ax.fill_between(int_t,idx+int_data[idx]-std_data[idx],
                        idx+int_data[idx]+std_data[idx],alpha=0.2,color='k')
        #ax.axhline(idx,color='k',alpha=0.5)
        ax.set_xlim(int_t.min(),int_t.max())
        ax.set_title(title)
    #ax.axhline(10000,color='k',label=label)
    #ax.axhline(10000,color='g',label=label1)
    ax.legend()

main()
